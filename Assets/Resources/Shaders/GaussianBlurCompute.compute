#pragma kernel CSMain
#include "./Includes/Math.cginc"

RWTexture2D<float4> result;

Texture2D heightMap;
SamplerState sampler_heightMap;
float4 heightMap_TexelSize;
float resolution;
int kernelSize;
float sigma;

float gauss(float x, float y, float sigma) {
    return  1.0f / (2.0f * PI * sigma * sigma) * exp(-(x * x + y * y) / (2.0f * sigma * sigma));
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float2 coord = float2(id.x / resolution, id.y / resolution);

    float4 o = 0;
    float sum = 0;
    float2 uvOffset;
    float weight;

    // Kernal size divided by 2 on CPU side
    for (float x = -kernelSize; x <= kernelSize; x++)
    {
        for (float y = -kernelSize; y <= kernelSize; y++)
        {
            // Calculate the offset
            uvOffset = coord;
            uvOffset.x += heightMap_TexelSize.x * x;
            uvOffset.y += heightMap_TexelSize.y * y;

            // Determine the weights
            weight = gauss(x, y, sigma);

            // Sample from the height map making sure to convert from linear to gamma output
            float4 heightSample = toGamma(abs(heightMap.SampleLevel(sampler_heightMap, uvOffset, 0)));
            o += heightSample * weight;
            sum += weight;
        }
    }

    o *= (1.0f / sum);
    result[id.xy] = o;
}